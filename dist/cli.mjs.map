{
  "version": 3,
  "sources": ["../src/cli.ts"],
  "sourcesContent": ["#!/usr/bin/env node\n/* eslint-disable no-console */\n\nimport hasha from 'hasha'\nimport fg from 'fast-glob'\nimport hashObject from 'hash-obj'\nimport fs from 'fs-extra'\nimport { Command } from 'commander'\nimport { spawnSync as exec } from 'child_process'\nimport pMap from 'p-map'\nimport { cpus } from 'os'\nimport { quoteForSh } from 'puka'\n\nconst { writeFile, readFile } = fs\n\nconst { version } = JSON.parse(\n  (await readFile(new URL('../package.json', import.meta.url))).toString()\n)\nconst lockFileName = '.postmon-lock'\n\nfunction log(message: string, ...rest: any[]): void {\n  // eslint-disable-next-line no-console\n  console.log(`[postmon] ${message}`, ...rest)\n}\n\nlog('Starting', version)\n\nconst program = new Command()\nconst { args } = program\n  .version(version, '-v, --version', 'output the current version')\n  .option('-d, --debug', 'Echo additional debugging messages')\n  .option('-i, --include <glob>', 'File glob to scan for changes')\n  .argument('[exec...]', 'Command line to execute if there are changes')\n  .parse(process.argv)\n\nconst { include } = program.opts()\nconst debug = true\n\nconst numberOfCpus = cpus()?.length\nif (!numberOfCpus || numberOfCpus <= 0) {\n  log(\"Error, can't detect your CPU\")\n  log('result:', cpus())\n  process.exit(1)\n}\nconst numberOfCores = Math.max(1, Math.round(numberOfCpus / 2))\n\nif (debug) {\n  log('args', args)\n  log('cpus', cpus().length)\n  log('cwd:', process.cwd())\n  log('cores:', numberOfCores)\n  log('include', include)\n}\n\nasync function doTask(include) {\n  if (debug) console.time('finding files', include)\n  const files = await fg(include, { dot: true })\n  if (debug) console.timeEnd('finding files')\n  if (debug) console.log('Found', files.length, 'matches')\n\n  const mapper = async (file: string) => {\n    return hasha.fromFile(file, { algorithm: 'md5' })\n  }\n\n  if (debug) console.time('hashing files')\n  const matches = await pMap(files, mapper, { concurrency: numberOfCores })\n  if (debug) console.timeEnd('hashing files')\n\n  if (debug)\n    console.log(\n      'rendered',\n      JSON.stringify(matches).length,\n      'bytes of state object'\n    )\n\n  if (debug) console.time('hashing object')\n  const overallHash = hashObject([matches.sort(), files.sort()], {\n    algorithm: 'sha512',\n  })\n  if (debug) console.timeEnd('hashing object')\n  if (debug) log('Current hash', overallHash)\n\n  let storedHash = ''\n  try {\n    const fileContents = await readFile(lockFileName)\n    storedHash = fileContents.toString()\n    if (debug) log('Lock hash', storedHash)\n  } catch {\n    log(`First time setup -- will create ${lockFileName} file if successful...`)\n  }\n\n  if (storedHash === overallHash) {\n    log(`No changes detected in ${files.length} files -- skipping execution.`)\n    return\n  }\n\n  // Execute\n  log(`Executing: ${args.map((e) => quoteForSh(e)).join(' ')}`)\n  const output = exec(args.map((e) => quoteForSh(e)).join(' '), {\n    shell: true,\n    stdio: 'inherit',\n  })\n  if (debug) log('output', output)\n\n  if (output.status === 0) {\n    await writeFile(lockFileName, overallHash)\n    log(`Written new hash to ${lockFileName}`)\n  }\n}\n\n;(async () => {\n  if (include) doTask(include)\n})()\n"],
  "mappings": ";AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAM,EAAE,WAAW,aAAa;AAEhC,MAAM,EAAE,YAAY,KAAK,MACtB,OAAM,SAAS,IAAI,IAAI,mBAAmB,YAAY,OAAO;AAEhE,MAAM,eAAe;AAErB,aAAa,YAAoB,MAAmB;AAElD,UAAQ,IAAI,aAAa,WAAW,GAAG;AAAA;AAGzC,IAAI,YAAY;AAEhB,MAAM,UAAU,IAAI;AACpB,MAAM,EAAE,SAAS,QACd,QAAQ,SAAS,iBAAiB,8BAClC,OAAO,eAAe,sCACtB,OAAO,wBAAwB,iCAC/B,SAAS,aAAa,gDACtB,MAAM,QAAQ;AAEjB,MAAM,EAAE,YAAY,QAAQ;AAC5B,MAAM,QAAQ;AAEd,MAAM,eAAe,QAAQ;AAC7B,IAAI,CAAC,gBAAgB,gBAAgB,GAAG;AACtC,MAAI;AACJ,MAAI,WAAW;AACf,UAAQ,KAAK;AAAA;AAEf,MAAM,gBAAgB,KAAK,IAAI,GAAG,KAAK,MAAM,eAAe;AAE5D,IAAI,OAAO;AACT,MAAI,QAAQ;AACZ,MAAI,QAAQ,OAAO;AACnB,MAAI,QAAQ,QAAQ;AACpB,MAAI,UAAU;AACd,MAAI,WAAW;AAAA;AAGjB,sBAAsB,UAAS;AAC7B,MAAI;AAAO,YAAQ,KAAK,iBAAiB;AACzC,QAAM,QAAQ,MAAM,GAAG,UAAS,EAAE,KAAK;AACvC,MAAI;AAAO,YAAQ,QAAQ;AAC3B,MAAI;AAAO,YAAQ,IAAI,SAAS,MAAM,QAAQ;AAE9C,QAAM,SAAS,OAAO,SAAiB;AACrC,WAAO,MAAM,SAAS,MAAM,EAAE,WAAW;AAAA;AAG3C,MAAI;AAAO,YAAQ,KAAK;AACxB,QAAM,UAAU,MAAM,KAAK,OAAO,QAAQ,EAAE,aAAa;AACzD,MAAI;AAAO,YAAQ,QAAQ;AAE3B,MAAI;AACF,YAAQ,IACN,YACA,KAAK,UAAU,SAAS,QACxB;AAGJ,MAAI;AAAO,YAAQ,KAAK;AACxB,QAAM,cAAc,WAAW,CAAC,QAAQ,QAAQ,MAAM,SAAS;AAAA,IAC7D,WAAW;AAAA;AAEb,MAAI;AAAO,YAAQ,QAAQ;AAC3B,MAAI;AAAO,QAAI,gBAAgB;AAE/B,MAAI,aAAa;AACjB,MAAI;AACF,UAAM,eAAe,MAAM,SAAS;AACpC,iBAAa,aAAa;AAC1B,QAAI;AAAO,UAAI,aAAa;AAAA,UAC5B;AACA,QAAI,mCAAmC;AAAA;AAGzC,MAAI,eAAe,aAAa;AAC9B,QAAI,0BAA0B,MAAM;AACpC;AAAA;AAIF,MAAI,cAAc,KAAK,IAAI,CAAC,MAAM,WAAW,IAAI,KAAK;AACtD,QAAM,SAAS,KAAK,KAAK,IAAI,CAAC,MAAM,WAAW,IAAI,KAAK,MAAM;AAAA,IAC5D,OAAO;AAAA,IACP,OAAO;AAAA;AAET,MAAI;AAAO,QAAI,UAAU;AAEzB,MAAI,OAAO,WAAW,GAAG;AACvB,UAAM,UAAU,cAAc;AAC9B,QAAI,uBAAuB;AAAA;AAAA;AAI/B;AAAC,AAAC,aAAY;AACZ,MAAI;AAAS,WAAO;AAAA;",
  "names": []
}
