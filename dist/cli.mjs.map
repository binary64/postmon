{
  "version": 3,
  "sources": ["../src/cli.ts"],
  "sourcesContent": ["#!/usr/bin/env node\n/* eslint-disable no-console */\n\nimport hasha from 'hasha'\nimport fg from 'fast-glob'\nimport hashObject from 'hash-obj'\nimport fs from 'fs-extra'\nimport { Command } from 'commander'\nimport { spawnSync as exec } from 'child_process'\nimport pMap from 'p-map'\nimport { cpus } from 'os'\nimport { quoteForSh } from 'puka'\nimport jsYaml from 'js-yaml'\n\nconst { writeFile, readFile } = fs\n\nconst { version } = JSON.parse(\n  (await readFile(new URL('../package.json', import.meta.url))).toString()\n)\nconst lockFileName = '.postmon-lock'\n\nfunction log(message: string, ...rest: any[]): void {\n  // eslint-disable-next-line no-console\n  console.log(`[postmon] ${message}`, ...rest)\n}\n\nlog('Starting', version)\n\nconst program = new Command()\nconst { args } = program\n  .version(version, '-v, --version', 'output the current version')\n  .option('-d, --debug', 'Echo additional debugging messages')\n  .option('-i, --include [globs...]', 'File glob to scan for changes')\n  .option('--name <name>', 'A string identifer for this execution')\n  .argument('[exec...]', 'Command line to execute if there are changes')\n  .parse(process.argv)\n\nconst opts = program.opts()\nconst debug = true\n\nconst numberOfCpus = cpus()?.length\nif (!numberOfCpus || numberOfCpus <= 0) {\n  log(\"Error, can't detect your CPU\")\n  log('result:', cpus())\n  process.exit(1)\n}\nconst numberOfCores = Math.max(1, Math.round(numberOfCpus / 2))\n\nif (debug) {\n  log('args', args)\n  log('cpus', cpus().length)\n  log('cwd:', process.cwd())\n  log('cores:', numberOfCores)\n  log('include', opts.include)\n}\n\nasync function getHashOfDirectory(directoryGlobs: string | string[]) {\n  if (debug) console.time('finding files', directoryGlobs)\n  const files = await fg(directoryGlobs, { dot: true })\n  if (debug) console.timeEnd('finding files')\n  if (debug) console.log('Found', files.length, 'matches')\n\n  const mapper = async (file: string) => {\n    return hasha.fromFile(file, { algorithm: 'md5' })\n  }\n\n  if (debug) console.time('hashing files')\n  const matches = await pMap(files, mapper, { concurrency: numberOfCores })\n  if (debug) console.timeEnd('hashing files')\n\n  if (debug)\n    console.log(\n      'rendered',\n      JSON.stringify(matches).length,\n      'bytes of state object'\n    )\n\n  if (debug) console.time('hashing object')\n  const ret = hashObject([matches.sort(), files.sort()], {\n    algorithm: 'sha512',\n  })\n  if (debug) console.timeEnd('hashing object')\n\n  return ret\n}\n\ninterface PostmonConfig {\n  scripts: {\n    [name: string]: PostmonConfigExecution\n  }\n}\ninterface PostmonConfigExecution {\n  command: string\n  inputs: string[]\n  outputs?: string[]\n}\n\nfunction isDocumentWithKey<T>(keyName: string) {\n  return function (e: any): e is T {\n    return typeof e === 'object' && keyName in e\n  }\n}\n\nasync function doTask(\n  directoryGlob: string | string[],\n  name = 'default',\n  commandLine: string\n) {\n  if (!commandLine) throw new Error('Must have a commandLine')\n\n  console.log(name, directoryGlob)\n\n  const overallHash = await getHashOfDirectory(directoryGlob)\n  if (debug) log('Current hash', overallHash)\n\n  const rawFile = (await readFile(lockFileName).catch(() => '')).toString()\n\n  const storedHashes =\n    (rawFile[0] === '{' &&\n      (rawFile ? (JSON.parse(rawFile) as Record<string, string>) : {})) ||\n    {}\n\n  if (Object.keys(storedHashes).length === 0)\n    log(`First time setup -- will create ${lockFileName} file if successful...`)\n\n  if (storedHashes?.[name] === overallHash) {\n    log(`No changes detected -- skipping execution.`)\n    return\n  }\n\n  // Execute\n  log(`Executing: ${commandLine}`)\n  const output = exec(commandLine, {\n    shell: true,\n    stdio: 'inherit',\n  })\n  if (debug) log('output', output)\n\n  // Store results\n  if (output.status === 0) {\n    await writeFile(\n      lockFileName,\n      JSON.stringify({ ...storedHashes, [name]: overallHash })\n    )\n    log(`Written new hash for '${name}' to ${lockFileName}`)\n  }\n}\n\n;(async () => {\n  if (opts.include)\n    doTask(opts.include, opts.name, args.map((e) => quoteForSh(e)).join(' '))\n  else {\n    // Read from .postmon.yml\n    const yml = jsYaml\n      .loadAll(fs.readFileSync('.postmon.yml').toString())\n      .find(isDocumentWithKey<PostmonConfig>('scripts'))\n    if (!yml) throw new Error('Define a .postmon.yml file first.')\n\n    // Run em all, who cares about Zen2 contention anyway\n    const mapper = ([name, { inputs, command }]) =>\n      doTask(inputs, name, command)\n    await pMap(\n      Object.entries(yml.scripts).filter(([, { command }]) => !!command),\n      mapper,\n      { concurrency: 1 }\n    )\n\n    console.log('All done.')\n  }\n})()\n"],
  "mappings": "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",
  "names": []
}
